#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('e-MCH-APp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/**
 * Event listener for MQTT CoAP & HTTP Protocol.
 */
 // initialize required libs
const StringDecoder = require('string_decoder').StringDecoder;
const decoder = new StringDecoder('utf8');

// MQTT Client
var mqtt = require('mqtt')
  , m_client = mqtt.connect();
m_client.subscribe('iot-2/evt/status/fmt/json');	// subscribe to a specific topic

// initialize variables
var milliseconds = 3000;	// polling time
var coap_mote_url = 'aaaa::c30c:0:0:2';
var http_mote_url = 'aaaa::c30c:0:0:3';
var c_data = "";
//	<---- MQTT response ---------->

m_client.on('message', function(topic, m_data) {
  console.log("MQTT: " + decoder.write(m_data));
});
//	<---- End MQTT response ---------->

//	polling function
var interval = setInterval(function() {

//	<---- CoAP response ---------->

var URL = require('url')
var c_opts = URL.parse('coap://['+coap_mote_url+']:5683/obs/mote')
c_opts.observe = true   //  observe resources
const coap  = require('coap'); // or coap
var c_req   = coap.request(c_opts);  
c_req.on('response', function(c_res) {
    if (c_data != decoder.write(c_res.payload)){
      c_data = decoder.write(c_res.payload);
        console.log("CoAP: " + decoder.write(c_res.payload));
  //cres.pipe(process.stdout);
	}
});

//	<---- End CoAP response ---------->

//	<---- HTTP response ---------->

var request = require('request');

request('http://['+http_mote_url+']', function (error, response, body) {
   if (!error && response.statusCode == 200) {
       console.log("Http: " +body) // Show the HTML for the Google homepage.
   }
})

//	<---- ENd HTTP response ---------->

}, milliseconds)	//	end polling function






var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log("User Connected");
  // Not a Good Way
  socket.emit('wsn-data',{message: "user_message"});

  socket.on('disconnect', function () {
    console.log("User Disconnected");
  });

});