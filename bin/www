#!/usr/bin/env node

/*

short hand commands

MQTT:
cd ~/kontiki/examples/zolertia/z1/mqtt-z1/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-mqtt-emch.rtt.upload nodeid=4 nodemac=4

CoAP:
cd ~/kontiki/examples/er-rest-example/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-coap-emch.rtt.upload nodeid=2 nodemac=2

HTTP:
cd ~/kontiki/examples/zolertia/z1/ipv6/z1-websense/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-http-emch.rtt.upload nodeid=3 nodemac=3

HOP HTTP:
cd ~/kontiki/examples/zolertia/z1/ipv6/z1-websense/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-http-hop.upload

Border Router:
cd ~/kontiki/examples/ipv6/rpl-border-router/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-border-router.upload nodeid=1 nodemac=1

Hop for CoAP, MQTT
cd ~/kontiki/examples/ipv6/rpl-collect/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-hop-coap-mqtt.upload

PowerTrace
cd ~/kontiki/examples/rime/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-hop-mote.upload

*/

var enable_socket = true;
console.log("Server Started at: http://localhost:3000/\n");
console.log("MQTT Socket Status: " + enable_socket + "\n");


if(enable_socket == true){
  console.log("View Socket enabled page: http://localhost:3000/mqtt-sock\n");
}

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('e-MCH-APp:server');
 var http = require('http');
 var session     = require('../config/ping'); // include ping configs && path must be relative to file you're in
 var connection  = require('../config/dbcon'); // include mysql connection object && path must be relative to file you're in

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
 	var port = parseInt(val, 10);

 	if (isNaN(port)) {
    // named pipe
    return val;
}

if (port >= 0) {
    // port number
    return port;
}

return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
 	if (error.syscall !== 'listen') {
 		throw error;
 	}

 	var bind = typeof port === 'string'
 	? 'Pipe ' + port
 	: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  	case 'EACCES':
  	console.error(bind + ' requires elevated privileges');
  	process.exit(1);
  	break;
  	case 'EADDRINUSE':
  	console.error(bind + ' is already in use');
  	process.exit(1);
  	break;
  	default:
  	throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
 	var addr = server.address();
 	var bind = typeof addr === 'string'
 	? 'pipe ' + addr
 	: 'port ' + addr.port;
 	debug('Listening on ' + bind);
 }


 var io = require('socket.io')(server);
 io.on('connection', function(socket){
 	console.log("User Connected");
  // Not a Good Way
  //socket.emit('wsn-data',{data: "10,100,100,100,100"});

  socket.on('disconnect', function () {
  	console.log("User Disconnected");
  });

});

/**
 * Event listener for Socket Based MQTT Protocol.
 */
 if(enable_socket == true){

var MessageID   = "nil";
var UpTime      = "nil";
var ClockTime   = "nil";
var Temperature = "nil";
var Battery     = "nil";
var PowTrace    = "nil";
var RTT			    = "nil";

var request_counter = 1;
var mote_uri = 'aaaa::c30c:0:0:4';
var duration_sec = '1';	// seconds i.e 0.5
var n_hops = '1'; // Hop counts i.e 3
// MQTT_0.5Sec_3Hop
var Protocol = 'MQTT_'+ duration_sec +'Sec_'+ n_hops +'Hop';
// initialize required libs
const StringDecoder = require('string_decoder').StringDecoder;
const decoder = new StringDecoder('utf8');

var mqtt = require('mqtt')
, client = mqtt.connect();
client.subscribe('iot-2/evt/status/fmt/json');

client.on('message', function(topic, payload) {
	/*-------------------- get Round Trip Time ---------------------*/
	session.pingHost (mote_uri, function (rtt_error, mote_uri, sent, rcvd) {
		RTT = rcvd - sent;
		//console.log ("Target " + mote_uri + ": RTT (ms=" + RTT + ")");

		if(!rtt_error){
			m_payload = decoder.write(payload);

	//  populate database
      //  MessageID, UpTime, ClockTime, Temperature, Battery, PowTrace  //<-- This
      var string = "";
      string =String(m_payload);
      string = string.split(",");
      MessageID   = (string[0]) ? string[0] : '0' ;
      UpTime      = (string[1]) ? string[1] : '0' ;
      ClockTime   = (string[2]) ? string[2] : '0' ;
      Temperature = (string[3]) ? string[3] : '0' ;
      Battery     = (string[4]) ? string[4] : '0' ;
      PowTrace    = (string[5]) ? string[5] : '0' ;
     
      connection.query('INSERT INTO `emch-tbl` (MessageID, UpTime, ClockTime, Temperature, Battery, Protocol, RTT, PowTrace) VALUES (\''+MessageID+'\',\''+UpTime+'\', \''+ClockTime+'\', \''+Temperature+'\', \''+Battery+'\', \''+Protocol+'\', \''+RTT+'\', \''+PowTrace+'\')', function(err, rows, fields) {if (err) throw err;});
	
      io.sockets.emit('wsn-data', {"data": m_payload + "," + RTT});
      /*-------------------- End get Payload ---------------------*/
  }else{
  	console.log("MQTT: Ping failed, Device is not reachable, Trying again ... \n");
          return;	// No RTT
      }

  });
	/*-------------------- End get Round Trip Time ---------------------*/
});

client.on('error', function(error) {
	request_counter = request_counter + 1;
	console.log("[===============< " + request_counter + " >===============]\n");
	console.log(error);
	console.log("[==================================]\n");
	return;
})

//	client.end('', function(){console.log("Event: Ended with Acknowledgement sent");});
//	client.unsubscribe('iot-2/evt/status/fmt/json', function(){console.log("Event: un-subscribed on topic");});

}	// enable_socket condition
