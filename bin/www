#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('e-MCH-APp:server');
 var http = require('http');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
 	var port = parseInt(val, 10);

 	if (isNaN(port)) {
    // named pipe
    return val;
}

if (port >= 0) {
    // port number
    return port;
}

return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
 	if (error.syscall !== 'listen') {
 		throw error;
 	}

 	var bind = typeof port === 'string'
 	? 'Pipe ' + port
 	: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  	case 'EACCES':
  	console.error(bind + ' requires elevated privileges');
  	process.exit(1);
  	break;
  	case 'EADDRINUSE':
  	console.error(bind + ' is already in use');
  	process.exit(1);
  	break;
  	default:
  	throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
 	var addr = server.address();
 	var bind = typeof addr === 'string'
 	? 'pipe ' + addr
 	: 'port ' + addr.port;
 	debug('Listening on ' + bind);
 }

function get_coap_http_on_mqtt_publish(){};

var io = require('socket.io')(server);
io.on('connection', function(socket){
	console.log("User Connected");
  // Not a Good Way
  //socket.emit('wsn-data',{data: "10,100,100,100,100"});

  socket.on('disconnect', function () {
  	console.log("User Disconnected");
  });

});

/**
 * Event listener for MQTT CoAP & HTTP Protocol.
 */


// create MYSQL Server connection to store data
var mysql      = require('mysql');
var connection = mysql.createConnection({
  host     : 'localhost', // default
  user     : 'root',  // default
  password : '',  // default
  database : 'e-mch' // app database name
});
connection.connect();
var Protocol = "MQTT_10Sec_3Hop";
 // initialize required libs
 const StringDecoder = require('string_decoder').StringDecoder;
 const decoder = new StringDecoder('utf8');

var mqtt = require('mqtt')
, client = mqtt.connect();
client.subscribe('iot-2/evt/status/fmt/json');

var start = new Date();
//console.log(start.getMilliseconds());
client.on('message', function(topic, payload) {
	var RTT = new Date() - start;

	start = new Date();
	console.info("Execution time: %dms", RTT);
	m_payload = decoder.write(payload);
	//client.end();
	console.log(m_payload);
	//  populate database
      //  MessageID, UpTime, ClockTime, Temperature, Battery, PowTrace  //<-- This
      var string = "";
      string =String(m_payload);
      string = string.split(",");
      var MessageID = string[0];
      var UpTime = string[1];
      var ClockTime = string[2];
      var Temperature = string[3];
      var Battery = string[4];
      var PowTrace = string[5];
      connection.query('INSERT INTO `e-mch-table` (MessageID, UpTime, ClockTime, Temperature, Battery, Protocol, RTT, PowTrace) VALUES (\''+MessageID+'\',\''+UpTime+'\', \''+ClockTime+'\', \''+Temperature+'\', \''+Battery+'\', \''+Protocol+'\', \''+RTT+'\', \''+PowTrace+'\')', function(err, rows, fields) {if (err) throw err;});

      io.sockets.emit('wsn-data', {"data": m_payload});

});


/*
// MQTT Client
var mqtt = require('mqtt')
, m_client = mqtt.connect();
m_client.subscribe('iot-2/evt/status/fmt/json');	// subscribe to a specific topic

// initialize variables

//	real experiments = 1, simulation = 0;
var real_experiments = 0;

var milliseconds = 10000;	// polling time
if (!real_experiments){	// not true
var mqtt_mote_url = 'aaaa::c30c:0:0:3';
var coap_mote_url = 'aaaa::c30c:0:0:2';
var http_mote_url = 'aaaa::c30c:0:0:3';
}

if (real_experiments){	// true
var mqtt_mote_url = 'aaaa::c30c:0:0:a';
// cd ~/kontiki/examples/zolertia/z1/mqtt-z1/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-mqtt-emch.pow.upload nodeid=10 nodemac=10

var coap_mote_url = 'aaaa::c30c:0:0:b';	
// cd ~/kontiki/examples/er-rest-example/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-coap-emch.upload nodeid=11 nodemac=11

var http_mote_url = 'aaaa::c30c:0:0:c';	
// cd ~/kontiki/examples/zolertia/z1/ipv6/z1-websense/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-http-emch.pow.upload nodeid=12 nodemac=12

// cd ~/kontiki/examples/ipv6/rpl-border-router/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-border-router.upload nodeid=1 nodemac=1

// cd ~/kontiki/examples/ipv6/rpl-collect/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-hop-udp-sender.upload

// cd ~/kontiki/examples/powertrace/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make example-powertrace.upload

}

var c_data = "";
var m_battery = 0.5;
var c_battery = 0.5;
var h_battery = 0.5;
var h_uptime =  10;
//	<---- MQTT response ---------->

m_client.on('message', function(topic, m_data) {
	var m_payload = decoder.write(m_data);
	//console.log("MQTT: " + m_payload);
  //	<----MQTT: Prepare Data for Battery ---------->
//  populate database
      // 183,915,117223,0,254
      //  MessageID, UpTime, ClockTime, Temperature, Battery  //<-- This
      var string = "";
      string =String(m_payload);
      string = string.split(",");
      var MessageID = string[0];
      var UpTime = string[1];
      var ClockTime = string[2];
      var Temperature = string[3];
      var Battery = string[4];
      var Protocol = "MQTT";

      m_battery = string[4];
      if(string[4].indexOf("RSSI (dBm)") > -1){
      	m_battery = "0000";
      }
      connection.query('INSERT INTO `e-mch-table` (MessageID, UpTime, ClockTime, Temperature, Battery, Protocol) VALUES (\''+MessageID+'\',\''+UpTime+'\', \''+ClockTime+'\', \''+Temperature+'\', \''+Battery+'\', \''+Protocol+'\')', function(err, rows, fields) {
      	if (err) throw err;
      });
//	<---- End MQTT: Prepare Data for Battery ---------->

get_coap_http_on_mqtt_publish();

});
//	<---- End MQTT response ---------->

function get_coap_http_on_mqtt_publish() {

//	<---- CoAP response ---------->

const coap  = require('coap')
, c_req   = coap.request('coap://['+coap_mote_url+']:5683/sens/mote')

c_req.on('response', function(c_res) {
	c_payload = decoder.write(c_res.payload);
	//console.log("CoAP: " + c_payload);
	//	<----CoAP: Prepare Data for Battery ---------->
	//  populate database
	      // 183,915,117223,0,254
	      //  MessageID, UpTime, ClockTime, Temperature, Battery  //<-- This
	      var string = "";
	      string =String(c_payload);
	      string = string.split(",");
	      var MessageID = string[0];
	      var UpTime = string[1];
	      var ClockTime = string[2];
	      var Temperature = string[3];
	      var Battery = string[4];
	      var Protocol = "CoAP";

	      c_battery = string[4];
	      connection.query('INSERT INTO `e-mch-table` (MessageID, UpTime, ClockTime, Temperature, Battery, Protocol) VALUES (\''+MessageID+'\',\''+UpTime+'\', \''+ClockTime+'\', \''+Temperature+'\', \''+Battery+'\', \''+Protocol+'\')', function(err, rows, fields) {
	      	if (err) throw err;
	      });
	//	<---- End CoAP: Prepare Data for Battery ---------->
})

c_req.end()
//	<---- End CoAP response ---------->

//	<---- HTTP response ---------->

var request = require('request');

request('http://['+http_mote_url+']', function (error, response, h_payload) {
	if (!error && response.statusCode == 200) {
       //console.log("Http: " +h_payload) 
       //	<----HTTP: Prepare Data for Battery ---------->
//  populate database
      // 183,915,117223,0,254
      //  MessageID, UpTime, ClockTime, Temperature, Battery  //<-- This
      var string = "";
      string =String(h_payload);
      string = string.split(",");
      var MessageID = string[0];
      var UpTime = string[1];
      var ClockTime = string[2];
      var Temperature = string[3];
      var Battery = string[4];
      var Protocol = "HTTP";

      h_battery = string[4];
      h_uptime = string[1];

      connection.query('INSERT INTO `e-mch-table` (MessageID, UpTime, ClockTime, Temperature, Battery, Protocol) VALUES (\''+MessageID+'\',\''+UpTime+'\', \''+ClockTime+'\', \''+Temperature+'\', \''+Battery+'\', \''+Protocol+'\')', function(err, rows, fields) {
      	if (err) throw err;
      });
//	<---- End HTTP: Prepare Data for Battery ---------->
}
})
//	<---- ENd HTTP response ---------->
io.sockets.emit('wsn-data', {"data": ''+h_uptime+','+m_battery+','+c_battery+','+h_battery+''}); // emit data to view/browser when response is arrived
console.log(''+h_uptime+','+m_battery+','+c_battery+','+h_battery+'');
};

*/
